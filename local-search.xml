<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>软件设计师复习要点</title>
    <link href="/2023/05/15/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9/"/>
    <url>/2023/05/15/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="软考中级-软件设计师复习要点（全部）"><a href="#软考中级-软件设计师复习要点（全部）" class="headerlink" title="软考中级-软件设计师复习要点（全部）"></a>软考中级-软件设计师复习要点（全部）</h2><div class="row">    <embed src="/ppdf/2023上半年软考知识点.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件设计师-23种设计模式概念</title>
    <link href="/2023/05/13/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/05/13/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">名称</th><th align="center">概念</th></tr></thead><tbody><tr><td align="center">工厂方法</td><td align="center">定义一个用于创建对象的接口，让子类决定将哪一个对象实例化。</td></tr><tr><td align="center">抽象工厂</td><td align="center">提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</td></tr><tr><td align="center">单例</td><td align="center">保证一个类只有一个实例，并提供该实例的全局访问点。</td></tr><tr><td align="center">原型</td><td align="center">通过复制现有的实例来创建新的实例。</td></tr><tr><td align="center">建造者</td><td align="center">将一个复杂对象的构建分离成多个简单对象的构建。</td></tr><tr><td align="center">适配器</td><td align="center">将一个类的接口转换成客户希望的另一个接口。</td></tr><tr><td align="center">桥接</td><td align="center">将抽象部分与实现部分分离，使它们都可以独立地变化。</td></tr><tr><td align="center">装饰者</td><td align="center">动态地将责任（行为和状态）附加到对象上。</td></tr><tr><td align="center">组合</td><td align="center">将对象组合成树形结构以表示“部分-整体”的层次结构。</td></tr><tr><td align="center">外观</td><td align="center">为子系统中的一组接口提供一个一致的界面，定义一个高层接口，使得这个子系统更加容易使用。</td></tr><tr><td align="center">享元</td><td align="center">运用共享技术实现相同或相似对象的重用，以减少重复创建对象，节省内存。</td></tr><tr><td align="center">代理</td><td align="center">为其他对象提供一种代理以控制对这个对象的访问。</td></tr><tr><td align="center">责任链</td><td align="center">将请求从一个链式结构中不断进行转发，直到有对象可以处理该请求为止。</td></tr><tr><td align="center">命令</td><td align="center">将请求封装成一个对象，使得可以用不同的请求对客户端进行参数化。</td></tr><tr><td align="center">解释器</td><td align="center">提供了评估语言的语法或表达式的方式。</td></tr><tr><td align="center">迭代器</td><td align="center">提供一种方法来访问聚集中的各个元素，而又不需暴露该聚集的内部表示。</td></tr><tr><td align="center">中介者</td><td align="center">用一个中介对象来封装一系列的对象交互。</td></tr><tr><td align="center">观察者</td><td align="center">定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。</td></tr><tr><td align="center">备忘录</td><td align="center">在不破坏对象封装性的前提下，将对象的内部状态保存在外部，并在需要时恢复。</td></tr><tr><td align="center">状态</td><td align="center">允许对象在其内部状态发生改变时改变其行为。</td></tr><tr><td align="center">策略</td><td align="center">定义一系列算法，将每个算法都封装起来，并使它们可以互换。</td></tr><tr><td align="center">模板方法</td><td align="center">将算法的框架固定，将实现的细节放到子类中去。</td></tr><tr><td align="center">访问者</td><td align="center">表示一个作用于某对象结构中的各元素的操作，在不改变各元素的类的前提下作用于这些元素的新操作。</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot项目统一返回接口响应状态码和异常</title>
    <link href="/2023/04/22/springboot%E9%A1%B9%E7%9B%AE%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/04/22/springboot%E9%A1%B9%E7%9B%AE%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="统一返回接口响应状态码"><a href="#统一返回接口响应状态码" class="headerlink" title="统一返回接口响应状态码"></a>统一返回接口响应状态码</h1><h2 id="因为是前后端分离整合，所以采用一个parent项目下包含两个模块，common和service。在Common模块中建立com-lsp-common-core-api包，将ApiConstants类放在constants文件中，其余两个存在包中即可，起到区分作用。再在该包中创建如下三个类。"><a href="#因为是前后端分离整合，所以采用一个parent项目下包含两个模块，common和service。在Common模块中建立com-lsp-common-core-api包，将ApiConstants类放在constants文件中，其余两个存在包中即可，起到区分作用。再在该包中创建如下三个类。" class="headerlink" title="因为是前后端分离整合，所以采用一个parent项目下包含两个模块，common和service。在Common模块中建立com.lsp.common.core.api包，将ApiConstants类放在constants文件中，其余两个存在包中即可，起到区分作用。再在该包中创建如下三个类。"></a>因为是前后端分离整合，所以采用一个parent项目下包含两个模块，common和service。在Common模块中建立com.lsp.common.core.api包，将ApiConstants类放在constants文件中，其余两个存在包中即可，起到区分作用。再在该包中创建如下三个类。</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ApiConstants</span> {<br>    HTTP_RES_CODE_200(<span class="hljs-number">200</span>, <span class="hljs-string">"ok"</span>),<br>    HTTP_RES_CODE_500(<span class="hljs-number">500</span>, <span class="hljs-string">"fail"</span>);<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String value;<br><br>    ApiConstants(Integer code, String value) {<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    }<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> code;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> {<br>        <span class="hljs-built_in">this</span>.code = code;<br>    }<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> value;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(String value)</span> {<br>        <span class="hljs-built_in">this</span>.value = value;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lsp.common.core.api.constants.ApiConstants;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseApiService</span>&lt;T&gt; {<br><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;T&gt; <span class="hljs-title function_">setResultError</span><span class="hljs-params">(Integer code, String msg)</span> {<br>        <span class="hljs-keyword">return</span> setResult(code, msg, <span class="hljs-literal">null</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误，可以传msg</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;T&gt; <span class="hljs-title function_">setResultError</span><span class="hljs-params">(String msg)</span> {<br>        <span class="hljs-keyword">return</span> setResult(ApiConstants.HTTP_RES_CODE_500.getCode(), msg, <span class="hljs-literal">null</span>);<br>    }<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 返回成功，可以传data值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;T&gt; <span class="hljs-title function_">setResultSuccessData</span><span class="hljs-params">(T data)</span> {<br>        <span class="hljs-keyword">return</span> setResult(ApiConstants.HTTP_RES_CODE_200.getCode(), ApiConstants.HTTP_RES_CODE_200.getValue(), data);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功，沒有data值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;T&gt; <span class="hljs-title function_">setResultSuccess</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> setResult(ApiConstants.HTTP_RES_CODE_200.getCode(), ApiConstants.HTTP_RES_CODE_200.getValue(), <span class="hljs-literal">null</span>);<br>    }<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通用封装 通用封装</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;T&gt; <span class="hljs-title function_">setResult</span><span class="hljs-params">(Integer code, String msg, T data)</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;T&gt;(code, msg, data);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseResponse</span>&lt;T&gt; {<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 返回码</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Integer code;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 消息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> String msg;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 返回</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> T data;<br>   <span class="hljs-comment">// 分页</span><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">()</span> {<br><br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(Integer code, String msg, T data)</span> {<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.code = code;<br>      <span class="hljs-built_in">this</span>.msg = msg;<br>      <span class="hljs-built_in">this</span>.data = data;<br>   }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="创建完成后，在service的接口实现类中继承BaseApiService该类即可（切记一定要在service模块的，pom-xml文件中引用Common模块）。例如成功则使用return-setResultSuccess-方法。"><a href="#创建完成后，在service的接口实现类中继承BaseApiService该类即可（切记一定要在service模块的，pom-xml文件中引用Common模块）。例如成功则使用return-setResultSuccess-方法。" class="headerlink" title="创建完成后，在service的接口实现类中继承BaseApiService该类即可（切记一定要在service模块的，pom.xml文件中引用Common模块）。例如成功则使用return setResultSuccess()方法。"></a>创建完成后，在service的接口实现类中继承BaseApiService该类即可（切记一定要在service模块的，pom.xml文件中引用Common模块）。例如成功则使用return setResultSuccess()方法。</h2><h1 id="统一返回异常类"><a href="#统一返回异常类" class="headerlink" title="统一返回异常类"></a>统一返回异常类</h1><h2 id="跟上面统一返回状态码差不多，也是在common模块中建立com-lsp-common-core-exception包，在该包下创建如下类"><a href="#跟上面统一返回状态码差不多，也是在common模块中建立com-lsp-common-core-exception包，在该包下创建如下类" class="headerlink" title="跟上面统一返回状态码差不多，也是在common模块中建立com.lsp.common.core.exception包，在该包下创建如下类"></a>跟上面统一返回状态码差不多，也是在common模块中建立com.lsp.common.core.exception包，在该包下创建如下类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局捕获异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ControllerAdvice(basePackages = "com.lsp")</span>   <span class="hljs-comment">//设定扫包范围</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> {<br><br>    <span class="hljs-meta">@ExceptionHandler(RuntimeException.class)</span><br>    <span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">//返回json数据格式</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">errorResult</span><span class="hljs-params">(Exception e)</span> {<br>        log.error(<span class="hljs-string">"&lt;error{}&gt;"</span>, e);<br>        Map&lt;String, Object&gt; errorResultMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        errorResultMap.put(<span class="hljs-string">"code"</span>, <span class="hljs-string">"500"</span>);<br>        errorResultMap.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"系统出现错误!"</span>);<br>        <span class="hljs-keyword">return</span> errorResultMap;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="注意一点，一定要将springboot启动类放在com-lsp文件下，这也就是为什么要将模块开头为什么一定要设置成cpm-lsp开头的原因，因为启动类文件放在哪，则以哪里为开头启动扫包。测试可以用1-x2F-0来测试。"><a href="#注意一点，一定要将springboot启动类放在com-lsp文件下，这也就是为什么要将模块开头为什么一定要设置成cpm-lsp开头的原因，因为启动类文件放在哪，则以哪里为开头启动扫包。测试可以用1-x2F-0来测试。" class="headerlink" title="注意一点，一定要将springboot启动类放在com.lsp文件下，这也就是为什么要将模块开头为什么一定要设置成cpm.lsp开头的原因，因为启动类文件放在哪，则以哪里为开头启动扫包。测试可以用1/0来测试。"></a>注意一点，一定要将springboot启动类放在com.lsp文件下，这也就是为什么要将模块开头为什么一定要设置成cpm.lsp开头的原因，因为启动类文件放在哪，则以哪里为开头启动扫包。测试可以用1/0来测试。</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软考学习笔记</title>
    <link href="/2023/03/24/%E8%BD%AF%E8%80%83%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/24/%E8%BD%AF%E8%80%83%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="软考中级软件设计师"><a href="#软考中级软件设计师" class="headerlink" title="软考中级软件设计师"></a>软考中级软件设计师</h1><h2 id="以下是我复习的归纳："><a href="#以下是我复习的归纳：" class="headerlink" title="以下是我复习的归纳："></a>以下是我复习的归纳：</h2><div class="row">    <embed src="/ppdf/软件设计师二轮复习.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mayikt最后学习到的地方</title>
    <link href="/2023/02/03/mayikt%E6%9C%80%E5%90%8E%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"/>
    <url>/2023/02/03/mayikt%E6%9C%80%E5%90%8E%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="java学习"><a href="#java学习" class="headerlink" title="java学习"></a>java学习</h1><p><img src="/image/%E6%9C%80%E5%90%8E%E5%AD%A6%E4%B9%A0%E5%88%B0.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用hexo-renderer-marked插入图片</title>
    <link href="/2023/01/14/hexo%E4%BD%BF%E7%94%A8hexo-renderer-marked%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <url>/2023/01/14/hexo%E4%BD%BF%E7%94%A8hexo-renderer-marked%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo使用hexo-renderer-marked插入图片"><a href="#hexo使用hexo-renderer-marked插入图片" class="headerlink" title="hexo使用hexo-renderer-marked插入图片"></a>hexo使用hexo-renderer-marked插入图片</h1><h2 id="如何向hexo博客中插入图片"><a href="#如何向hexo博客中插入图片" class="headerlink" title="如何向hexo博客中插入图片"></a>如何向hexo博客中插入图片</h2><h3 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h3><h4 id="插件hexo-renderer-marked解决了这个问题。可以只用npm-install-hexo-renderer-marked命令直接安装-如果在git上会爆错，最好使用cmd管理员权限进行安装-，之后在config-yaml中更改配置如下："><a href="#插件hexo-renderer-marked解决了这个问题。可以只用npm-install-hexo-renderer-marked命令直接安装-如果在git上会爆错，最好使用cmd管理员权限进行安装-，之后在config-yaml中更改配置如下：" class="headerlink" title="插件hexo-renderer-marked解决了这个问题。可以只用npm install hexo-renderer-marked命令直接安装(如果在git上会爆错，最好使用cmd管理员权限进行安装)，之后在config.yaml中更改配置如下："></a>插件hexo-renderer-marked解决了这个问题。可以只用npm install hexo-renderer-marked命令直接安装(如果在git上会爆错，最好使用cmd管理员权限进行安装)，之后在config.yaml中更改配置如下：</h4><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">post_asset_folder: true<br>marked:<br>  prependRoot: true<br>  postAsset: true<br></code></pre></td></tr></tbody></table></figure><h3 id="之后就可以在使用下面的方式愉快的插入图片了。"><a href="#之后就可以在使用下面的方式愉快的插入图片了。" class="headerlink" title="之后就可以在使用下面的方式愉快的插入图片了。"></a>之后就可以在使用下面的方式愉快的插入图片了。</h3><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">![](image.jpg)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOs7云配置联网问题</title>
    <link href="/2022/12/05/CentOs7%E4%BA%91%E9%85%8D%E7%BD%AE%E8%81%94%E7%BD%91%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/05/CentOs7%E4%BA%91%E9%85%8D%E7%BD%AE%E8%81%94%E7%BD%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="只要执行yum命令，就会出现的报错代码："><a href="#只要执行yum命令，就会出现的报错代码：" class="headerlink" title="只要执行yum命令，就会出现的报错代码："></a>只要执行yum命令，就会出现的报错代码：</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>base                                                                                                                                                                                                                    | <span class="hljs-number">3.6</span> kB  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <br>epel                                                                                                                                                                                                                    | <span class="hljs-number">5.4</span> kB  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <br>extras                                                                                                                                                                                                                  | <span class="hljs-number">2.9</span> kB  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <br>http:<span class="hljs-comment">//repo.mysql.com/yum/mysql-connectors-community/fc/7/x86_64/repodata/repomd.xml: [Errno 14] HTTP Error 404 - Not Found</span><br>Trying other mirror.<br>To address <span class="hljs-built_in">this</span> issue please refer to the below wiki article <br><br>https:<span class="hljs-comment">//wiki.centos.org/yum-errors</span><br><br>If above article doesn<span class="hljs-string">'t help to resolve this issue please use https://bugs.centos.org/.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"> One of the configured repositories failed (MySQL Connectors Community),</span><br><span class="hljs-string"> and yum doesn'</span>t have enough cached data to <span class="hljs-keyword">continue</span>. At <span class="hljs-built_in">this</span> point the only<br> safe thing yum can <span class="hljs-keyword">do</span> is fail. There are a few ways to work <span class="hljs-string">"fix"</span> <span class="hljs-built_in">this</span>:<br><br>     <span class="hljs-number">1.</span> Contact the upstream <span class="hljs-keyword">for</span> the repository and get them to fix the problem.<br><br>     <span class="hljs-number">2.</span> Reconfigure the baseurl/etc. <span class="hljs-keyword">for</span> the repository, to point to a working<br>        upstream. This is most often useful <span class="hljs-keyword">if</span> you are using a newer<br>        distribution release than is supported by the <span class="hljs-title function_">repository</span> <span class="hljs-params">(and the</span><br><span class="hljs-params">        packages <span class="hljs-keyword">for</span> the previous distribution release still work)</span>.<br><br>     <span class="hljs-number">3.</span> Run the command with the repository temporarily disabled<br>            yum --disablerepo=mysql-connectors-community ...<br><br>     <span class="hljs-number">4.</span> Disable the repository permanently, so yum won<span class="hljs-string">'t use it by default. Yum</span><br><span class="hljs-string">        will then just ignore the repository until you permanently enable it</span><br><span class="hljs-string">        again or use --enablerepo for temporary usage:</span><br><span class="hljs-string"></span><br><span class="hljs-string">            yum-config-manager --disable mysql-connectors-community</span><br><span class="hljs-string">        or</span><br><span class="hljs-string">            subscription-manager repos --disable=mysql-connectors-community</span><br><span class="hljs-string"></span><br><span class="hljs-string">     5. Configure the failing repository to be skipped, if it is unavailable.</span><br><span class="hljs-string">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="hljs-string">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="hljs-string">        slower). If it is a very temporary problem though, this is often a nice</span><br><span class="hljs-string">        compromise:</span><br><span class="hljs-string"></span><br><span class="hljs-string">            yum-config-manager --save --setopt=mysql-connectors-community.skip_if_unavailable=true</span><br><span class="hljs-string"></span><br><span class="hljs-string">failure: repodata/repomd.xml from mysql-connectors-community: [Errno 256] No more mirrors to try.</span><br><span class="hljs-string">http://repo.mysql.com/yum/mysql-connectors-community/fc/7/x86_64/repodata/repomd.xml: [Errno 14] HTTP Error 404 - Not Found</span><br></code></pre></td></tr></tbody></table></figure><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h3 id="1-先判断，虚拟机的网络有没有联网。有联网则进行下面步骤"><a href="#1-先判断，虚拟机的网络有没有联网。有联网则进行下面步骤" class="headerlink" title="1.先判断，虚拟机的网络有没有联网。有联网则进行下面步骤"></a>1.先判断，虚拟机的网络有没有联网。有联网则进行下面步骤</h3><h3 id="2-执行下面三个代码："><a href="#2-执行下面三个代码：" class="headerlink" title="2.执行下面三个代码："></a>2.执行下面三个代码：</h3><h3 id="yum-clean-all"><a href="#yum-clean-all" class="headerlink" title="yum clean all"></a>yum clean all</h3><h3 id="yum-makecache-执行到这，可能还会出现上面的bug"><a href="#yum-makecache-执行到这，可能还会出现上面的bug" class="headerlink" title="yum makecache  (执行到这，可能还会出现上面的bug)"></a>yum makecache  (执行到这，可能还会出现上面的bug)</h3><h3 id="yum-update-执行到这，可能还会出现上面的bug"><a href="#yum-update-执行到这，可能还会出现上面的bug" class="headerlink" title="yum update    (执行到这，可能还会出现上面的bug)"></a>yum update    (执行到这，可能还会出现上面的bug)</h3><h3 id="执行上面三步，还是行不通的话，就要修改配置文件了，centos7和centos8的老毛病。"><a href="#执行上面三步，还是行不通的话，就要修改配置文件了，centos7和centos8的老毛病。" class="headerlink" title="执行上面三步，还是行不通的话，就要修改配置文件了，centos7和centos8的老毛病。"></a>执行上面三步，还是行不通的话，就要修改配置文件了，centos7和centos8的老毛病。</h3><h3 id="3-x2F-etc-x2F-yum-repos-d-x2F-epel-repo-文件"><a href="#3-x2F-etc-x2F-yum-repos-d-x2F-epel-repo-文件" class="headerlink" title="3. /etc/yum.repos.d/epel.repo 文件"></a>3. /etc/yum.repos.d/epel.repo 文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">vi /etc/yum.repos.d/epel.repo<br></code></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将配置文件中的代码全部替换成下面的代码</span><br>[epel]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux $releasever - $basearch<br># It is much more secure to use the metalink, but <span class="hljs-keyword">if</span> you wish to use a local mirror<br># place its address here.<br>baseurl=https:<span class="hljs-comment">//mirrors.aliyun.com/epel/$releasever/Everything/$basearch</span><br>#baseurl=https:<span class="hljs-comment">//download.example/pub/epel/$releasever/Everything/$basearch</span><br>#metalink=https:<span class="hljs-comment">//mirrors.fedoraproject.org/metalink?repo=epel-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>countme=<span class="hljs-number">1</span><br>gpgkey=file:<span class="hljs-comment">///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8</span><br><br>[epel-debuginfo]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux $releasever - $basearch - Debug<br># It is much more secure to use the metalink, but <span class="hljs-keyword">if</span> you wish to use a local mirror<br># place its address here.<br>baseurl=https:<span class="hljs-comment">//mirrors.aliyun.com/epel/$releasever/Everything/$basearch</span><br>#baseurl=https:<span class="hljs-comment">//download.example/pub/epel/$releasever/Everything/$basearch/debug</span><br>#metalink=https:<span class="hljs-comment">//mirrors.fedoraproject.org/metalink?repo=epel-debug-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br>enabled=<span class="hljs-number">0</span><br>gpgkey=file:<span class="hljs-comment">///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8</span><br>gpgcheck=<span class="hljs-number">1</span><br><br>[epel-source]<br>name=Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux $releasever - $basearch - Source<br># It is much more secure to use the metalink, but <span class="hljs-keyword">if</span> you wish to use a local mirror<br># place it<span class="hljs-string">'s address here.</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/epel/$releasever/Everything/$basearch</span><br><span class="hljs-string">#baseurl=https://download.example/pub/epel/$releasever/Everything/source/tree/</span><br><span class="hljs-string">#metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-source-$releasever&amp;arch=$basearch&amp;infra=$infra&amp;content=$contentdir</span><br><span class="hljs-string">enabled=0</span><br><span class="hljs-string">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8</span><br><span class="hljs-string">gpgcheck=1</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nacos构建集群方式注意事项</title>
    <link href="/2022/12/01/Nacos%E6%9E%84%E5%BB%BA%E9%9B%86%E7%BE%A4%E6%96%B9%E5%BC%8F%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2022/12/01/Nacos%E6%9E%84%E5%BB%BA%E9%9B%86%E7%BE%A4%E6%96%B9%E5%BC%8F%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="1-本地搭建3个nacos，最好取名端口号8748，8849，8950，以便区分。"><a href="#1-本地搭建3个nacos，最好取名端口号8748，8849，8950，以便区分。" class="headerlink" title="1.本地搭建3个nacos，最好取名端口号8748，8849，8950，以便区分。"></a>1.本地搭建3个nacos，最好取名端口号8748，8849，8950，以便区分。</h2><h2 id="2-navicat，在本地上创建数据库nacos，然后将nacos-mysql-sql导入。"><a href="#2-navicat，在本地上创建数据库nacos，然后将nacos-mysql-sql导入。" class="headerlink" title="2.navicat，在本地上创建数据库nacos，然后将nacos-mysql.sql导入。"></a>2.navicat，在本地上创建数据库nacos，然后将nacos-mysql.sql导入。</h2><h2 id="2-以本机为例-三个集群中的一个nacos-8748为例，修改D-NacosTest-nacos-8748-conf-application-properties文件，修改server-port端口号，将数据库注释打开。"><a href="#2-以本机为例-三个集群中的一个nacos-8748为例，修改D-NacosTest-nacos-8748-conf-application-properties文件，修改server-port端口号，将数据库注释打开。" class="headerlink" title="2.以本机为例,三个集群中的一个nacos-8748为例，修改D:\NacosTest\nacos-8748\conf\application.properties文件，修改server.port端口号，将数据库注释打开。"></a>2.以本机为例,三个集群中的一个nacos-8748为例，修改D:\NacosTest\nacos-8748\conf\application.properties文件，修改server.port端口号，将数据库注释打开。</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">server.port=<span class="hljs-number">8748</span><br><br> db.num=<span class="hljs-number">1</span><br><br> db.url<span class="hljs-number">.0</span>=jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br> db.user<span class="hljs-number">.0</span>=root<br> db.password<span class="hljs-number">.0</span>=<span class="hljs-number">123456</span>  <span class="hljs-comment">//账号密码为数据库密码</span><br></code></pre></td></tr></tbody></table></figure><h2 id="3-修改D-NacosTest-nacos-8748-conf-cluster-conf文件，全部注释掉，加入以下集群"><a href="#3-修改D-NacosTest-nacos-8748-conf-cluster-conf文件，全部注释掉，加入以下集群" class="headerlink" title="3.修改D:\NacosTest\nacos-8748\conf\cluster.conf文件，全部注释掉，加入以下集群"></a>3.修改D:\NacosTest\nacos-8748\conf\cluster.conf文件，全部注释掉，加入以下集群</h2> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">192.168</span><span class="hljs-number">.222</span><span class="hljs-number">.1</span>:<span class="hljs-number">8748</span>  <br><span class="hljs-number">192.168</span><span class="hljs-number">.222</span><span class="hljs-number">.1</span>:<span class="hljs-number">8849</span><br><span class="hljs-number">192.168</span><span class="hljs-number">.222</span><span class="hljs-number">.1</span>:<span class="hljs-number">8950</span><br><span class="hljs-comment">//注意千万不能写127.0.0.1：端口号。这样写很容易多创建一个集群</span><br><span class="hljs-comment">//电脑cmd 通过ipconfig 查看ipv4地址 使用该地址 创建集群 </span><br><span class="hljs-comment">//cluster.conf.example 文件名需要修改，将的example删除</span><br></code></pre></td></tr></tbody></table></figure><h2 id="4-运行nacos即可"><a href="#4-运行nacos即可" class="headerlink" title="4.运行nacos即可"></a>4.运行nacos即可</h2><h1 id="idea使用多个集群"><a href="#idea使用多个集群" class="headerlink" title="idea使用多个集群"></a>idea使用多个集群</h1><pre><code class="java">//在application.yml中加入的多个集群地址，这里要用127.0.0.1代替ipv4地址server:  port: 7071spring:  cloud:    nacos:      discovery://04.第四节-Nacos客户端随机注册算法（多个集群） 要将所有集群都写上 虽然写一个也是可以的//集群 采用随机算法 AP模式实现选择一个接口地址 完成服务的注册 在将数据同步到其他节点（会稍微有点延迟）//AP模式数据同步 最大缺点 就是数据一致性问题//实现注册中心 保证数据一致性 --cp模式 Raft选举        server-addr: 127.0.0.1:8748,127.0.0.1:8849,127.0.0.1:8950  application:    name: coderlin-member</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud中Nacos做分布式控制中心</title>
    <link href="/2022/11/30/SpringCloud%E4%B8%ADNacos%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E6%8E%A7%E5%88%B6%E4%B8%AD%E5%BF%83/"/>
    <url>/2022/11/30/SpringCloud%E4%B8%ADNacos%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E6%8E%A7%E5%88%B6%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="客户端启动报错java-lang-IllegalArgumentException-no-server-available的解决方案-SpringCloud中-Nacos做注册中心"><a href="#客户端启动报错java-lang-IllegalArgumentException-no-server-available的解决方案-SpringCloud中-Nacos做注册中心" class="headerlink" title="客户端启动报错java.lang.IllegalArgumentException: no server available的解决方案 SpringCloud中 Nacos做注册中心"></a>客户端启动报错java.lang.IllegalArgumentException: no server available的解决方案 SpringCloud中 Nacos做注册中心</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.IllegalArgumentException: no server available<br>at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:<span class="hljs-number">438</span>) ~[nacos-client-<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>.jar:na]<br>at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:<span class="hljs-number">386</span>) ~[nacos-client-<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>.jar:na]<br>at com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:<span class="hljs-number">188</span>) ~[nacos-client-<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>.jar:na]<br>at com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:<span class="hljs-number">205</span>) ~[nacos-client-<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>.jar:na]<br>at com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:<span class="hljs-number">184</span>) ~[nacos-client-<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>.jar:na]<br>at com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:<span class="hljs-number">61</span>) ~[spring-cloud-alibaba-nacos-discovery-<span class="hljs-number">2.1</span><span class="hljs-number">.0</span>.RELEASE.jar:<span class="hljs-number">2.1</span><span class="hljs-number">.0</span>.RELEASE]<br>at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:<span class="hljs-number">239</span>) [spring-cloud-commons-<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE]<br>at com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:<span class="hljs-number">74</span>) [spring-cloud-alibaba-nacos-discovery-<span class="hljs-number">2.1</span><span class="hljs-number">.0</span>.RELEASE.jar:<span class="hljs-number">2.1</span><span class="hljs-number">.0</span>.RELEASE]<br>at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:<span class="hljs-number">138</span>) [spring-cloud-commons-<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE]<br>at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:<span class="hljs-number">101</span>) [spring-cloud-commons-<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE]<br>at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:<span class="hljs-number">88</span>) [spring-cloud-commons-<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE]<br>at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:<span class="hljs-number">47</span>) [spring-cloud-commons-<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.2</span>.RELEASE]<br>at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:<span class="hljs-number">172</span>) [spring-context-<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE.jar:<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE]<br>at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:<span class="hljs-number">165</span>) [spring-context-<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE.jar:<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE]<br>at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:<span class="hljs-number">139</span>) [spring-context-<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE.jar:<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE]<br>at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:<span class="hljs-number">403</span>) [spring-context-<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE.jar:<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE]<br>at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:<span class="hljs-number">360</span>) [spring-context-<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE.jar:<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE]<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:<span class="hljs-number">165</span>) [spring-boot-<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE]<br>at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="hljs-number">553</span>) [spring-context-<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE.jar:<span class="hljs-number">5.2</span><span class="hljs-number">.4</span>.RELEASE]<br>at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:<span class="hljs-number">141</span>) [spring-boot-<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE]<br>at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="hljs-number">747</span>) [spring-boot-<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE]<br>at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:<span class="hljs-number">397</span>) [spring-boot-<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">315</span>) [spring-boot-<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">1226</span>) [spring-boot-<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="hljs-number">1215</span>) [spring-boot-<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE.jar:<span class="hljs-number">2.2</span><span class="hljs-number">.5</span>.RELEASE]<br>at com.wuyou.springcloud.UserService.main(UserService.java:<span class="hljs-number">11</span>) [classes/:na]<br></code></pre></td></tr></tbody></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="我的错误就在这里，百度了很久也修改了很多配置-才发现是自己写的有问题；大家在配置nacos的配置中心的时候-注意写法（很重要）。两个yml文件都要写，特别是要区分地址！"><a href="#我的错误就在这里，百度了很久也修改了很多配置-才发现是自己写的有问题；大家在配置nacos的配置中心的时候-注意写法（很重要）。两个yml文件都要写，特别是要区分地址！" class="headerlink" title="我的错误就在这里，百度了很久也修改了很多配置 才发现是自己写的有问题；大家在配置nacos的配置中心的时候 注意写法（很重要）。两个yml文件都要写，特别是要区分地址！"></a>我的错误就在这里，百度了很久也修改了很多配置 才发现是自己写的有问题；大家在配置nacos的配置中心的时候 注意写法（很重要）。两个yml文件都要写，特别是要区分地址！</h3><h2 id="方案1："><a href="#方案1：" class="headerlink" title="方案1："></a>方案1：</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">这个两个配置不要搞混<br>spring.cloud.nacos.config.server-addr=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8848</span> <span class="hljs-comment">//在 bootstrap.properties 中配置 Nacos server 的地址和应用名</span><br>spring.cloud.nacos.discovery.server-addr=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8848</span> <span class="hljs-comment">//在 application.properties 中配置 Nacos server 的地址</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring中的@value实现原理</title>
    <link href="/2022/10/30/Spring%E4%B8%AD%E7%9A%84-value%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2022/10/30/Spring%E4%B8%AD%E7%9A%84-value%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring中-Value注解-底层实现原理"><a href="#Spring中-Value注解-底层实现原理" class="headerlink" title="Spring中 @Value注解 底层实现原理"></a>Spring中 @Value注解 底层实现原理</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="实际上-Value-使用过读取配置文件中的数据内容，然后注入bean对象中，在通过反射机制，将配置文件中的属性值赋值到属性参数"><a href="#实际上-Value-使用过读取配置文件中的数据内容，然后注入bean对象中，在通过反射机制，将配置文件中的属性值赋值到属性参数" class="headerlink" title="实际上@Value 使用过读取配置文件中的数据内容，然后注入bean对象中，在通过反射机制，将配置文件中的属性值赋值到属性参数."></a>实际上@Value 使用过读取配置文件中的数据内容，然后注入bean对象中，在通过反射机制，将配置文件中的属性值赋值到属性参数.</h3><h4 id="下面通过代码可以验证"><a href="#下面通过代码可以验证" class="headerlink" title="下面通过代码可以验证:"></a>下面通过代码可以验证:</h4><h5 id="MayiktController-java"><a href="#MayiktController-java" class="headerlink" title="MayiktController.java"></a>MayiktController.java</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value("${lsp.link}")</span><br>   <span class="hljs-keyword">private</span>  String link;<br><br>   <span class="hljs-keyword">public</span>  <span class="hljs-title function_">MayiktController</span><span class="hljs-params">()</span>{<br>       log.info(<span class="hljs-string">"&lt;MayiktController 无参构造方法执行&gt;"</span>);<br>   }<br><br>   <span class="hljs-meta">@GetMapping("/getLink")</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLink</span><span class="hljs-params">()</span>{<br>       <span class="hljs-keyword">return</span> link;<br>   }<br><br></code></pre></td></tr></tbody></table></figure><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">lsp:<br>  link: https:<span class="hljs-comment">//makabaka1434.github.io/</span><br></code></pre></td></tr></tbody></table></figure><h5 id="app-java"><a href="#app-java" class="headerlink" title="app.java"></a>app.java</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherApp</span> {<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {<br>        SpringApplication.run(WeatherApp.class);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>###传统项目中，如果将配置文件直接写死，存在本地，那么就需要重启服务，重新读取配置文件，重新创建bean对象，才可以注入新的属性值。因此需要使用分布式配置中心。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
